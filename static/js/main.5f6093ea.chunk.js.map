{"version":3,"sources":["logo.svg","components/timerText.js","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["TimerText","props","id","className","Timer","useState","timerStr","setTimerStr","cssClass","setCssClass","timer","setTimer","newTime","Date","date","getDate","month","getMonth","year","getFullYear","resumeTimer","setInterval","time","hour","getHours","minutes","getMinutes","seconds","getSeconds","displayTime","displayTimer","useEffect","onClick","clearInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAAe,I,mBCUAA,MARf,YAA6B,IAATC,EAAQ,EAARA,MAChB,OACI,qBAAKC,GAAG,aAAaC,UAAU,aAA/B,SACKF,KC4DEG,MA9Df,WACI,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,SAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACH,EAAwBJ,mBAAS,MAAjC,mBAAKK,EAAL,KAAYC,EAAZ,KAEIC,EAAU,IAAIC,KACdC,EAAOF,EAAQG,UACfC,EAAQJ,EAAQK,WAChBC,EAAON,EAAQO,cA2BnB,SAASC,IACFT,EAASU,aAAY,YAXP,WACpB,IAAIC,EAAO,IAAIT,KACXU,EAAOD,EAAKE,WACZC,EAAUH,EAAKI,aACfC,EAAUL,EAAKM,aACfC,EAAW,UAAMN,EAAN,cAAgBE,EAAhB,cAA6BE,GAC5CpB,EAAY,GAAD,OAAIO,EAAJ,YAAYE,EAAZ,YAAqBE,EAArB,YAA6BW,IAMvCC,KACC,MASH,OApCGC,qBAAU,WACZX,MACC,IAECW,qBAAU,WAEFtB,EADa,UAAbD,EACY,QAGA,WAEjB,CAACF,IA0BN,sBAAKJ,GAAG,iBAAiBC,UAAS,yBAAoBK,GAAtD,UAOC,cAAC,EAAD,CAAWP,MAAOK,IAClB,wBAAQ0B,QAdV,WACOC,cAAcvB,IAanB,kBACA,wBAAQsB,QAASZ,EAAjB,wBCjDYc,MANf,WACG,OACD,cAAC,EAAD,KCKaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5f6093ea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react'\n\nfunction TimerText({props}) {\n    return (\n        <div id=\"time-block\" className=\"time-block\">\n            {props}\n        </div>\n    )\n}\n\nexport default TimerText;\n","import React, {useState, useEffect} from 'react';\nimport TimerText from './timerText';\n\nfunction Timer() {\n    const [timerStr, setTimerStr] = useState('');\n    const [cssClass, setCssClass] = useState('white');\n\tlet [timer, setTimer] = useState(null);\n\n\tlet newTime = new Date();\n\tlet date = newTime.getDate();\n\tlet month = newTime.getMonth();\n\tlet year = newTime.getFullYear();\n\n    // calls while component mounted.\n    useEffect(() => {\n\t\tresumeTimer();\n\t},[])\n\n    useEffect(() => {\n        if (cssClass === 'white') {\n            setCssClass('black')\n        }\n        else {\n            setCssClass('white')\n        }\n    }, [timerStr])\n\t\n    // setting time value\n\tconst displayTimer = () => {\n\t\tlet time = new Date();\n\t\tlet hour = time.getHours();\n\t\tlet minutes = time.getMinutes();\n\t\tlet seconds = time.getSeconds();\n\t\tlet displayTime = `${hour} : ${minutes} : ${seconds}`\n\t\tsetTimerStr(`${date}/${month}/${year} ${displayTime}`);\n\t}\n\n    // to resume the time\n\tfunction resumeTimer() {\n        setTimer(setInterval(() => {\n\t\t\tdisplayTimer();\n\t\t},1000))\n\t}\n\n    // to stop the time\n\tfunction stopTimer() {\n        clearInterval(timer);\n\t\treturn;\n\t}\n\n\treturn (\n\t\t<div id=\"main-container\" className={`main-container ${cssClass}`}>\n\t\t\t{/* <div className=\"dropdown\">\n\t\t\t\t<select onChange={(e) => setCssClass(e.target.value)}>\n\t\t\t\t\t<option value=\"white\">Light</option>\n\t\t\t\t\t<option value=\"black\">Dark</option>\n\t\t\t\t</select>\n\t\t\t</div> */}\n\t\t\t<TimerText props={timerStr}/>\n\t\t\t<button onClick={stopTimer}>stop</button>\n\t\t\t<button onClick={resumeTimer}>resume</button>\n\t\t</div>\n\t);\n}\n\nexport default Timer;\n","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\nimport Timer from './components/timer';\n\nfunction App() {\n  \treturn (\n\t\t<Timer />\n\t)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}