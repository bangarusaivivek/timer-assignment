{"version":3,"sources":["logo.svg","components/timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","newTime","Date","date","getDate","month","getMonth","year","getFullYear","timer","firstTimer","getHours","getMinutes","getSeconds","resumeTimer","setTimeout","time","hour","minutes","seconds","displayTime","document","getElementById","innerHTML","displayTimer","useEffect","id","className","onChange","e","target","value","classList","replace","onClick","clearTimeout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8KAAe,I,WC0DAA,MAxDf,WACC,IAAIC,EAAU,IAAIC,KACdC,EAAOF,EAAQG,UACfC,EAAQJ,EAAQK,WAChBC,EAAON,EAAQO,cACfC,EAAQ,KACHC,EAAU,UAAMP,EAAN,YAAcE,EAAd,YAAuBE,EAAvB,YAA+BN,EAAQU,WAAvC,cAAuDV,EAAQW,aAA/D,cAAiFX,EAAQY,cAW5G,SAASC,IACFL,EAAQM,YAAW,YAVL,WACpB,IAAIC,EAAO,IAAId,KACXe,EAAOD,EAAKL,WACZO,EAAUF,EAAKJ,aACfO,EAAUH,EAAKH,aACfO,EAAW,UAAMH,EAAN,cAAgBC,EAAhB,cAA6BC,GAC5CE,SAASC,eAAe,cAAcC,UAAtC,UAAqDpB,EAArD,YAA6DE,EAA7D,YAAsEE,EAAtE,YAA8Ea,GACxEN,IAILU,KACC,KAmBH,OAJAC,qBAAU,WACTX,MACC,IAGD,sBAAKY,GAAG,iBAAiBC,UAAS,uBAAlC,UACC,qBAAKA,UAAU,WAAf,SACC,yBAAQC,SAhBR,SAAwBC,GACG,UAAnBA,EAAEC,OAAOC,MACTV,SAASC,eAAe,kBAAkBU,UAAUC,QAAQ,QAAS,SAGrEZ,SAASC,eAAe,kBAAkBU,UAAUC,QAAQ,QAAS,UAW7E,UACC,wBAAQF,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,uBAGF,qBAAKL,GAAG,aAAaC,UAAU,aAA/B,SACEjB,IAEF,wBAAQwB,QA5BV,WACOC,aAAa1B,IA2BlB,kBACA,wBAAQyB,QAASpB,EAAjB,wBC1CYsB,MANf,WACG,OACD,cAAC,EAAD,KCKaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1Be,K","file":"static/js/main.1019ed5f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from 'react';\n\nfunction Timer() {\n\tlet newTime = new Date();\n\tlet date = newTime.getDate();\n\tlet month = newTime.getMonth();\n\tlet year = newTime.getFullYear();\n\tlet timer = null;\n    const firstTimer = `${date}/${month}/${year} ${newTime.getHours()} : ${newTime.getMinutes()} : ${newTime.getSeconds()}`;\n\t\n\tconst displayTimer = () => {\n\t\tlet time = new Date();\n\t\tlet hour = time.getHours();\n\t\tlet minutes = time.getMinutes();\n\t\tlet seconds = time.getSeconds();\n\t\tlet displayTime = `${hour} : ${minutes} : ${seconds}`\n\t\tdocument.getElementById('time-block').innerHTML = `${date}/${month}/${year} ${displayTime}`;\n        resumeTimer();\n\t}\n\tfunction resumeTimer() {\n        timer = setTimeout(() => {\n\t\t\tdisplayTimer();\n\t\t},1000)\n\t}\n\tfunction stopTimer() {\n        clearTimeout(timer);\n\t\treturn;\n\t}\n    function handleDropdown(e) {\n        if (e.target.value === 'white') {\n            document.getElementById(\"main-container\").classList.replace('black', 'white');\n        }\n        else {\n            document.getElementById(\"main-container\").classList.replace('white', 'black');\n        }\n    }\n\n\tuseEffect(() => {\n\t\tresumeTimer();\n\t},[])\n\n\treturn (\n\t\t<div id=\"main-container\" className={`main-container white`}>\n\t\t\t<div className=\"dropdown\">\n\t\t\t\t<select onChange={handleDropdown}>\n\t\t\t\t\t<option value=\"white\">Light</option>\n\t\t\t\t\t<option value=\"black\">Dark</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\t<div id=\"time-block\" className=\"time-block\">\n\t\t\t\t{firstTimer}\n\t\t\t</div>\n\t\t\t<button onClick={stopTimer}>stop</button>\n\t\t\t<button onClick={resumeTimer}>resume</button>\n\t\t</div>\n\t);\n}\n\nexport default Timer;\n","import logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\nimport Timer from './components/timer';\n\nfunction App() {\n  \treturn (\n\t\t<Timer />\n\t)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}